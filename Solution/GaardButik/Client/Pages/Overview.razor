@page "/"
@using GaardButik.Client.MetaData;
@using GaardButik.Shared.Command;
@inject HttpClient Http

<h3>Overblik</h3>
<div>
    <button class="oi oi-plus" @onclick="() => openCreateModal=true"></button>
    <button class="oi oi-trash" @onclick="() => openDeleteModal=true"></button>
    <button class="oi oi-dollar" @onclick="() => openSoldModal=true"></button>
</div>
<ListView 
    ListData="products"
          TypeMetadata="productMetaData"
    @bind-SelectedItem="@selectedRows">
</ListView>

<Modal Title="Opret" @bind-ShowModal="@openCreateModal" ModalOk="CreateProduct">
    <select @bind="productCreateCommand.TypeId">
        @foreach (var type in productTypes)
        {
            <option value="@type.Id">@type.Name</option>
        }
        <option value="0">Ny</option>
    </select>
    @if (productCreateCommand.TypeId == 0)
    {
        <label>Produkt type navn</label>
        <input @bind="productCreateCommand.TypeName" />
        <br />
        <label>Produkt type beskrivelse</label>
        <input @bind="productCreateCommand.TypeDescription" />
        <br/>
    }
    <label>Produkt navn</label>
    <input @bind="productCreateCommand.Name" />
    <br/>
    <label>Produkt pris</label>
    <input @bind="productCreateCommand.Price" />
    <br />
    <label>Produkt kilo pris</label>
    <input @bind="productCreateCommand.KGPrice" />
    <br />
    <label>Produkt udløbsdato</label>
    <input type=date @bind="productCreateCommand.ExperationDate" />
    <br />
    <label>antal af produkted</label>
    <input @bind="productCreateCommand.amount" />
    <br />
</Modal>

<Modal Title="Slet" @bind-ShowModal="@openDeleteModal" ModalOk="DeleteProduct" IsCreate="false">
    <p>produkter der vil blive slætted</p>
    @foreach(var product in products.Where(x => selectedRows.Contains(x.Id)))
    {
        <p>@product.Name @product.ExperationDate</p>
    }
</Modal>

<Modal Title="Solgt" @bind-ShowModal="@openSoldModal" ModalOk="SoldProduct">
    <p>produkter der vil blive solgt</p>
    @foreach (var product in products.Where(x => selectedRows.Contains(x.Id)))
    {
        <p>@product.Name @product.ExperationDate</p>
    }
</Modal>

@code {
    public List<long> selectedRows { get; set; } = new List<long>();

    public List<Product> products = new List<Product>();

    public ProductMetaData productMetaData = new ProductMetaData();

    public bool openCreateModal = false;

    public bool openDeleteModal = false;

    public bool openSoldModal = false;

    public List<ProductType> productTypes = new List<ProductType>();

    public ProductCreateCommand productCreateCommand = new ProductCreateCommand();

    protected override async Task OnInitializedAsync()
    {
        await GetProducts();
        productTypes = (await Http.GetFromJsonAsync<ICollection<ProductType>>("Product/ProductType")).ToList();
    }

    public async Task GetProducts()
    {
        products = (await Http.GetFromJsonAsync<ICollection<Product>>("Product")).ToList();
    }

    public async Task CreateProduct()
    {
        await Http.PostAsJsonAsync("Product", productCreateCommand);
        await GetProducts();
    }

    public async Task DeleteProduct()
    {
        await Http.PostAsJsonAsync("Product/Delete", new ProductDeleteCommand(){ ProductIds = selectedRows });
        products.RemoveAll(x => selectedRows.Contains(x.Id));
        selectedRows = new List<long>();
    }

    public async Task SoldProduct()
    {
        await Http.PostAsJsonAsync("Product/Sold", new ProductSoldCommand() { ProductIds = selectedRows });
        products.RemoveAll(x => selectedRows.Contains(x.Id));
        selectedRows = new List<long>();
    }
}
